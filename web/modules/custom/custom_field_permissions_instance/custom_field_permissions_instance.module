<?php

/**
 * @file
 * Contains custom_field_permissions_instance.module.
 */

use Drupal\Core\Access\AccessResult;
use Drupal\Core\Field\FieldDefinitionInterface;
use Drupal\Core\Field\FieldItemListInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Session\AccountInterface;
use Drupal\field\FieldConfigInterface;
use Drupal\custom_field_permissions_instance\CustomFieldPermissionsService;
use Drupal\custom_field_permissions_instance\Plugin\AdminFormSettingsInterface;
use Drupal\custom_field_permissions_instance\Plugin\FieldPermissionTypeInterface;

/**
 * Implements hook_module_implements_alter().
 *
 * @param array<mixed> $implementations
 * @param string $hook
 */
function custom_field_permissions_instance_module_implements_alter(array &$implementations, string $hook) : void {
  // Ensure that custom_field_permissions_instance runs after field_permissions
  if (isset($implementations['custom_field_permissions_instance']) && isset($implementations['custom_field_permissions_instance'])) {
    $saved = $implementations['custom_field_permissions_instance'];
    unset($implementations['custom_field_permissions_instance']);
    $implementations['custom_field_permissions_instance'] = $saved;
  }
}

/**
 * Implements hook_help().
 */
function custom_field_permissions_instance_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    case 'help.page.field_permissions':
      $output = '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Set field-level permissions to edit or view fields in any entity type (content, users, taxonomy, etc), edit field during entity creation, and edit or view permissions for content owned by the current user.') . '</p>';
      return $output;
  }
}

/**
 * Implements hook_entity_field_access().
 */
function custom_field_permissions_instance_entity_field_access($operation, FieldDefinitionInterface $field_definition, $account, FieldItemListInterface $items = NULL) {
  $context = ($operation == 'view') ? 'view' : 'form';
  if (!$field_definition->isDisplayConfigurable($context) || empty($items) || !is_a($field_definition->getFieldStorageDefinition(), '\Drupal\field\FieldStorageConfigInterface')) {
    return AccessResult::neutral();
  }
  $access_field = \Drupal::service('custom_field_permissions_instance.permissions_service')->getFieldAccess($operation, $items, $account, $field_definition);
  if (!$access_field) {
    return AccessResult::forbidden();
  }
  return AccessResult::neutral();
}

/**
 * Implements hook_jsonapi_entity_field_filter_access().
 */
function custom_field_permissions_instance_jsonapi_entity_field_filter_access(FieldDefinitionInterface $field_definition, AccountInterface $account) {
  if (!$field_definition->isDisplayConfigurable('view') || !is_a($field_definition->getFieldStorageDefinition(), '\Drupal\field\FieldStorageConfigInterface')) {
    return AccessResult::neutral();
  }
  dump($field_definition);

  /** @var \Drupal\custom_field_permissions_instance\CustomFieldPermissionsServiceInterface $service */
  $service = \Drupal::service('custom_field_permissions_instance.permissions_service');
  if ($service instanceof CustomFieldPermissionsService) {
    $access = $service->hasFieldViewAccessForEveryEntity($account, $field_definition);
  }
  else {
    $permission_type = $service->fieldGetPermissionType($field_definition->getFieldStorageDefinition());
    $access = ($permission_type == FieldPermissionTypeInterface::ACCESS_PUBLIC);
  }

  return $access ? AccessResult::neutral() : AccessResult::forbidden();
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * @see custom_field_permissions_instance_permissions_matrix()
 */
function custom_field_permissions_instance_form_field_config_edit_form_alter(&$form, FormStateInterface $form_state) {
  $account = \Drupal::currentUser();
  /** @var \Drupal\field\FieldConfigInterface $field */
  $field = $form_state->getFormObject()->getEntity();
  $field_config = $form_state->getFormObject()->getEntity();
  $current_bundle = $field_config->getTargetBundle();
  if (!$account->hasPermission('administer field permissions instance')) {
    return $form;
  }
  // Remove on comment field.
  if (CustomFieldPermissionsService::isCommentField($field)) {
    return $form;
  }

  $form['fid'] = ['#type' => 'hidden', '#value' => $field->id()];
  $form['field_permissions'] = [
    '#weight' => 50,
  ];

  // Always add the 'not set' option, which isn't implemented as a plugin.
  $options = [
    FieldPermissionTypeInterface::ACCESS_PUBLIC => t('Not set'),
  ];
  $descriptions = [
    FieldPermissionTypeInterface::ACCESS_PUBLIC => [
      '#description' => t('Field inherits content permissions.'),
    ],
  ];

  $plugin_manager = \Drupal::service('plugin.custom_field_permissions_instance.types.manager');
  $definitions = $plugin_manager->getDefinitions();
  /** @var \Drupal\custom_field_permissions_instance\Plugin\FieldPermissionTypeInterface[] $plugins */
  $plugins = [];
  foreach ($definitions as $id => $definition) {
    $plugin = $plugin_manager->createInstance($id, [], $field->getFieldStorageDefinition());
    if ($plugin->appliesToField($field)) {
      $options[$id] = $definition['title'];
      $descriptions[$id] = ['#description' => $definition['description']];
      $plugins[$id] = $plugin;
    }
  }

  $form['field_permissions']['type'] = [
    '#title' => t('Field visibility and permissions'),
    '#description' => t('<strong>These permissions apply to all instances of this field.</strong>'),
    '#type' => 'radios',
    '#options' => $options,
    '#default_value' => \Drupal::service('custom_field_permissions_instance.permissions_service')->fieldGetPermissionType($field->getFieldStorageDefinition(), $current_bundle),
  ];

  // Add in the descriptions.
  $form['field_permissions']['type'] += $descriptions;

  $form['actions']['submit']['#submit'][] = 'custom_field_permissions_instance_field_config_edit_form_submit';
  $form['#entity_builders'][] = 'custom_field_permissions_instance_field_config_edit_form_builder';

  $user_role_storage = \Drupal::service('entity_type.manager')->getStorage('user_role');
  // Allow each plugin to add to or alter the form.
  foreach ($plugins as $id => $plugin) {
    if ($plugin instanceof AdminFormSettingsInterface) {
      // Allow plugin to add to the form.
      $form['field_permissions'][$id] = [
        '#type' => 'container',
        '#states' => [
          'visible' => [
            ':input[name="type"]' => ['value' => $id],
          ],
        ],
      ];
      $plugin->buildAdminForm($form['field_permissions'][$id], $form_state, $user_role_storage);
    }
  }
}

/**
 * Form builder for the field config edit form.
 *
 * @see custom_field_permissions_instance_form_field_config_edit_form_alter
 */
function custom_field_permissions_instance_field_config_edit_form_builder($entity_type, FieldConfigInterface $field, array &$form, FormStateInterface $form_state) {
  $storage = $field->getFieldStorageDefinition();
  $current_third_party_settings =  $storage->getThirdPartySetting('custom_field_permissions_instance', 'bundles_types_permissions', []);
  $field_config = $form_state->getFormObject()->getEntity();
  $current_bundle = $field_config->getTargetBundle();
  if ($form_state->getValue('type') == FieldPermissionTypeInterface::ACCESS_PUBLIC) {
    if(!empty($current_third_party_settings[$current_bundle])) {
      unset($current_third_party_settings[$current_bundle]);
    }
  }
  else {
    $current_third_party_settings[$current_bundle] = $form_state->getValue('type');
  }
  $storage->setThirdPartySetting('custom_field_permissions_instance', 'bundles_types_permissions', $current_third_party_settings);
  if (version_compare(\Drupal::VERSION, '10.2', '<')) {
    $storage->save();
  }
}

/**
 * Submit handler for the field configuration form.
 *
 * @see field_permissions_form_field_config_edit_form_alter()
 */
function custom_field_permissions_instance_field_config_edit_form_submit(array &$form, FormStateInterface $form_state) {
  /** @var \Drupal\Core\Field\FieldDefinitionInterface $field */
  $field = $form_state->getFormObject()->getEntity();

  // Allow all plugin types to react to the submitted form.
  $definitions = \Drupal::service('plugin.custom_field_permissions_instance.types.manager')->getDefinitions();
  $manager = \Drupal::service('plugin.custom_field_permissions_instance.types.manager');
  foreach ($definitions as $definition) {
    $plugin = $manager->createInstance($definition['id'], [], $field->getFieldStorageDefinition());
    if ($plugin instanceof AdminFormSettingsInterface) {
      $plugin->submitAdminForm($form, $form_state, \Drupal::service('entity_type.manager')->getStorage('user_role'));
    }
  }

}

/**
 * Implements hook_migration_plugins_alter().
 *
 * Adds process plugin to insert field_permissions as third party settings.
 */
function custom_field_permissions_instance_migration_plugins_alter(array &$migrations) {
  $field_migrations = array_filter(
    $migrations,
    function ($definition) {
      return $definition['id'] === 'd7_field';
    }
  );

  foreach (array_keys($field_migrations) as $plugin_id) {
    $migrations[$plugin_id]['process']['third_party_settings/field_permissions']['plugin'] = 'd7_field_permission_settings';
  }
}

